
# coding: utf-8

# In[1]:


import torch
import torch.nn as nn
from torch.autograd import Variable
import torchvision
import torch.utils.data as Data
import matplotlib.pyplot as plt


# In[2]:


EPOCH = 1
BATCH_SIZE = 64
TIME_STEP = 28
INPUT_SIZE = 28
LR = 0.001
DOWNLOAD_MNIST = False
ROOT = 'G:\学习\pytorch神经网络\Mnis'


# In[4]:


train_data = torchvision.datasets.MNIST(root=ROOT,train=True,transform=torchvision.transforms.ToTensor(),download=DOWNLOAD_MNIST)
train_loader = torch.utils.data.DataLoader(dataset=train_data,batch_size=BATCH_SIZE,shuffle=True,)


# In[5]:


test_data = torchvision.datasets.MNIST(root=ROOT, train=False)
test_x = torch.unsqueeze(test_data.test_data, dim=1).type(torch.FloatTensor)[:2000]/255.   # shape from (2000, 28, 28) to (2000, 1, 28, 28), value in range(0,1)
test_y = test_data.test_labels[:2000]
test_y = test_y.numpy()

# In[8]:


class RNN(nn.Module):
    def __init__(self):
        super(RNN, self).__init__()

        self.rnn = nn.LSTM(
            input_size=INPUT_SIZE,
            hidden_size=64,
            num_layers=1,
            batch_first=True,
        )

        self.out = nn.Linear(64,10)

    def forward(self, x):
        r_out,(h_n,h_c) = self.rnn(x,None)
        out = self.out(r_out[:,-1,:])
        return out


# In[9]:


rnn = RNN()


# In[10]:


optimizer = torch.optim.Adam(rnn.parameters(), lr=LR)
loss_func = nn.CrossEntropyLoss()


# In[13]:


if __name__ == '__main__':
    for epoch in range(EPOCH):
        for step,(x,y) in enumerate(train_loader):
            b_x = Variable(x.view(-1,28,28)) #reshape成(batch, time_step, input_size)的形式
            b_y = Variable(y)

            output = rnn(b_x)
            loss = loss_func(output,b_y)

            optimizer.zero_grad()
            loss.backward()
            optimizer.step()

            if step % 50 == 0:
                test_x = Variable(test_x.view(-1,28,28))
                test_output = rnn(test_x)  # (samples, time_step, input_size)
                pred_y = torch.max(test_output, 1)[1].data.numpy().squeeze()
                accuracy = float((pred_y == test_y).astype(int).sum()) / float(test_y.size)
                print('Epoch: ', epoch, '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)
    torch.save(rnn,'rnn.plk')
