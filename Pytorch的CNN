
# coding: utf-8

# In[3]:


import torch
import torch.nn as nn
from torch.autograd import Variable
import torchvision
import torch.utils.data as Data
import matplotlib.pyplot as plt


# In[4]:


EPOCH = 1
BATCH_SIZE = 50
LR = 0.001
DOWNLOAD_MNIST = False
ROOT = 'G:\学习\pytorch神经网络\Mnis'


# In[5]:


train_data = torchvision.datasets.MNIST(root=ROOT,
                                        train=True,
                                        transform=torchvision.transforms.ToTensor(),
                                        download = False)


# In[6]:


train_loader = Data.DataLoader(dataset=train_data,batch_size=BATCH_SIZE,shuffle=True,num_workers=4)


# In[7]:


test_data = torchvision.datasets.MNIST(root=ROOT,train=False)
test_x = torch.unsqueeze(test_data.test_data, dim=1).type(torch.FloatTensor)[:2000]/255.   # shape from (2000, 28, 28) to (2000, 1, 28, 28), value in range(0,1)
test_y = test_data.test_labels[:2000]


# In[44]:


class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        self.conv1 = nn.Sequential(nn.Conv2d(in_channels=1,out_channels=16,kernel_size=5,stride=1,padding=2,),
                                   nn.ReLU(),
                                   nn.MaxPool2d(kernel_size=2)
                                  )
        self.conv2 = nn.Sequential(nn.Conv2d(in_channels=16, out_channels=32, kernel_size=5, stride=1, padding=2),
                                   nn.ReLU(),
                                   nn.MaxPool2d(kernel_size=2)
                                  )
        self.out = nn.Linear(32*7*7,10)     #全连层

    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = x.view(x.size(0), -1)  # flatten the output of conv2 to (batch_size, 32 * 7 * 7)
        output = self.out(x)
        return output,x


# In[45]:


cnn = CNN()


# In[33]:


optimizer = torch.optim.Adam(cnn.parameters(),lr = LR)
loss_fuc  = nn.CrossEntropyLoss()


# In[46]:

if __name__ == '__main__':
    for epoch in range(EPOCH):
        for step,(x,y) in enumerate(train_loader):
            b_x = Variable(x)
            b_y = Variable(y)

            output = cnn(b_x)[0]
            loss = loss_fuc(output,b_y)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            if step % 50 == 0:
                test_output, last_layer = cnn(test_x)
                pred_y = torch.max(test_output, 1)[1].data.squeeze().numpy()
                accuracy = float((pred_y == test_y.data.numpy()).astype(int).sum()) / float(test_y.size(0))
                print('Epoch: ', epoch, '| train loss: %.4f' % loss.data.numpy(), '| test accuracy: %.2f' % accuracy)
    torch.save(cnn,'cnn.plk')
